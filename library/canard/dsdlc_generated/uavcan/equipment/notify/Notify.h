/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\notify\1041.Notify.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_NOTIFY_NOTIFY
#define __UAVCAN_EQUIPMENT_NOTIFY_NOTIFY

#include <stdint.h>
#include "canard_scalar.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
# 1041
# Notify info.
#

uint2 NOTIFY_LOCK      = 1
uint2 NOTIFY_UNLOCK    = 0
uint2 lock

uint2 NOTIFY_GROUP_CAL    = 1
uint2 NOTIFY_GROUP_CHECK  = 0
uint2 group

uint4 NOTIFY_PRIORITY_VERY_HIGH   = 4
uint4 NOTIFY_PRIORITY_HIGH        = 3
uint4 NOTIFY_PRIORITY_MEDIUM      = 2
uint4 NOTIFY_PRIORITY_LOW         = 1
uint4 NOTIFY_PRIORITY_VERY_LOW    = 0
uint4 priority

uint16 LED_PATTERN_BGC_OFF            = 0x0000
uint16 LED_PATTERN_BGC_ON             = 0xFFFF
uint16 LED_PATTERN_BGC_SLOW    		  = 0x0003
uint16 LED_PATTERN_BGC_FAST           = 0x5555
uint16 LED_PATTERN_BGC_MOD1 		  = 0x0500
uint16 LED_PATTERN_BGC_MOD2 		  = 0x0550
uint16 LED_PATTERN_BGC_MOD3 		  = 0x050F
uint16 led_status

uint32 rgb
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.notify.Notify
saturated uint2 lock
saturated uint2 group
saturated uint4 priority
saturated uint16 led_status
saturated uint32 rgb
******************************************************************************/

#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_ID                  1041
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NAME                "uavcan.equipment.notify.Notify"
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_SIGNATURE           (0xFAEB0201FBC1DAEBULL)

#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_MAX_SIZE            ((56 + 7)/8)

// Constants
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_LOCK                            1 // 1
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_UNLOCK                          0 // 0
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_GROUP_CAL                       1 // 1
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_GROUP_CHECK                     0 // 0
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_PRIORITY_VERY_HIGH              4 // 4
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_PRIORITY_HIGH                   3 // 3
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_PRIORITY_MEDIUM                 2 // 2
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_PRIORITY_LOW                    1 // 1
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_NOTIFY_PRIORITY_VERY_LOW               0 // 0
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_LED_PATTERN_BGC_OFF               0x0000 // 0x0000
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_LED_PATTERN_BGC_ON                0xFFFF // 0xFFFF
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_LED_PATTERN_BGC_SLOW              0x0003 // 0x0003
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_LED_PATTERN_BGC_FAST              0x5555 // 0x5555
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_LED_PATTERN_BGC_MOD1              0x0500 // 0x0500
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_LED_PATTERN_BGC_MOD2              0x0550 // 0x0550
#define UAVCAN_EQUIPMENT_NOTIFY_NOTIFY_LED_PATTERN_BGC_MOD3              0x050F // 0x050F

typedef struct
{
    // FieldTypes
    uint8_t    lock;                          // bit len 2
    uint8_t    group;                         // bit len 2
    uint8_t    priority;                      // bit len 4
    uint16_t   led_status;                    // bit len 16
    uint32_t   rgb;                           // bit len 32

} uavcan_equipment_notify_Notify;

static inline
uint32_t uavcan_equipment_notify_Notify_encode(uavcan_equipment_notify_Notify* source, void* msg_buf);

static inline
int32_t uavcan_equipment_notify_Notify_decode(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_notify_Notify* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_notify_Notify_encode_internal(uavcan_equipment_notify_Notify* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_notify_Notify_decode_internal(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_notify_Notify* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\notify\1041.Notify.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_notify_Notify_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_notify_Notify_encode_internal(uavcan_equipment_notify_Notify* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    source->lock = CANARD_INTERNAL_SATURATE_UNSIGNED(source->lock, 3)
    canardEncodeScalar(msg_buf, offset, 2, (void*)&source->lock); // 3
    offset += 2;

    source->group = CANARD_INTERNAL_SATURATE_UNSIGNED(source->group, 3)
    canardEncodeScalar(msg_buf, offset, 2, (void*)&source->group); // 3
    offset += 2;

    source->priority = CANARD_INTERNAL_SATURATE_UNSIGNED(source->priority, 15)
    canardEncodeScalar(msg_buf, offset, 4, (void*)&source->priority); // 15
    offset += 4;

    canardEncodeScalar(msg_buf, offset, 16, (void*)&source->led_status); // 65535
    offset += 16;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->rgb); // 4294967295
    offset += 32;

    return offset;
}

/**
  * @brief uavcan_equipment_notify_Notify_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_notify_Notify_encode(uavcan_equipment_notify_Notify* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_notify_Notify_encode_internal(source, msg_buf, offset, 0);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_notify_Notify_decode_internal
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_notify_Notify dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_notify_Notify_decode_internal(
  const CanardTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_notify_Notify* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 2, false, (void*)&dest->lock);
    if (ret != 2)
    {
        goto uavcan_equipment_notify_Notify_error_exit;
    }
    offset += 2;

    ret = canardDecodeScalar(transfer, offset, 2, false, (void*)&dest->group);
    if (ret != 2)
    {
        goto uavcan_equipment_notify_Notify_error_exit;
    }
    offset += 2;

    ret = canardDecodeScalar(transfer, offset, 4, false, (void*)&dest->priority);
    if (ret != 4)
    {
        goto uavcan_equipment_notify_Notify_error_exit;
    }
    offset += 4;

    ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&dest->led_status);
    if (ret != 16)
    {
        goto uavcan_equipment_notify_Notify_error_exit;
    }
    offset += 16;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->rgb);
    if (ret != 32)
    {
        goto uavcan_equipment_notify_Notify_error_exit;
    }
    offset += 32;
    return offset;

uavcan_equipment_notify_Notify_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_notify_Notify_decode
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_notify_Notify dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_notify_Notify_decode(const CanardTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_notify_Notify* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_notify_Notify); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_notify_Notify_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_NOTIFY_NOTIFY