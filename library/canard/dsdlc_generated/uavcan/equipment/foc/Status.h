/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\foc\1121.Status.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_FOC_STATUS
#define __UAVCAN_EQUIPMENT_FOC_STATUS

#include <stdint.h>
#include "canard_scalar.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Generic FOC gimbal status.
# Unknown fields should be set to NAN.
#

uint4 error_code

float32 angle
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.foc.Status
saturated uint4 error_code
saturated float32 angle
******************************************************************************/

#define UAVCAN_EQUIPMENT_FOC_STATUS_ID                     1121
#define UAVCAN_EQUIPMENT_FOC_STATUS_NAME                   "uavcan.equipment.foc.Status"
#define UAVCAN_EQUIPMENT_FOC_STATUS_SIGNATURE              (0xF01A5072EC474BDAULL)

#define UAVCAN_EQUIPMENT_FOC_STATUS_MAX_SIZE               ((36 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    uint8_t    error_code;                    // bit len 4
    float      angle;                         // float32 Saturate

} uavcan_equipment_foc_Status;

static inline
uint32_t uavcan_equipment_foc_Status_encode(uavcan_equipment_foc_Status* source, void* msg_buf);

static inline
int32_t uavcan_equipment_foc_Status_decode(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_foc_Status* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_foc_Status_encode_internal(uavcan_equipment_foc_Status* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_foc_Status_decode_internal(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_foc_Status* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\foc\1121.Status.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_foc_Status_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_foc_Status_encode_internal(uavcan_equipment_foc_Status* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    source->error_code = CANARD_INTERNAL_SATURATE_UNSIGNED(source->error_code, 15)
    canardEncodeScalar(msg_buf, offset, 4, (void*)&source->error_code); // 15
    offset += 4;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->angle); // 2147483647
    offset += 32;

    return offset;
}

/**
  * @brief uavcan_equipment_foc_Status_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_foc_Status_encode(uavcan_equipment_foc_Status* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_foc_Status_encode_internal(source, msg_buf, offset, 0);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_foc_Status_decode_internal
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_foc_Status dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_foc_Status_decode_internal(
  const CanardTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_foc_Status* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 4, false, (void*)&dest->error_code);
    if (ret != 4)
    {
        goto uavcan_equipment_foc_Status_error_exit;
    }
    offset += 4;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->angle);
    if (ret != 32)
    {
        goto uavcan_equipment_foc_Status_error_exit;
    }
    offset += 32;
    return offset;

uavcan_equipment_foc_Status_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_foc_Status_decode
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_foc_Status dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_foc_Status_decode(const CanardTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_foc_Status* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_foc_Status); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_foc_Status_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_FOC_STATUS