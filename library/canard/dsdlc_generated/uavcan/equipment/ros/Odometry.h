/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\ros\1110.Odometry.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_ROS_ODOMETRY
#define __UAVCAN_EQUIPMENT_ROS_ODOMETRY

#include <stdint.h>
#include "canard_scalar.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\Timestamp.h>

/******************************* Source text **********************************
#
# Odometry.
# The system supports up to 256 actuators; up to 15 of them can be commanded with one message.
#
uavcan.Timestamp timestamp

float32     deltTime
float32[3]  position
float32[4]  quaternion
float32[3]  velocity
float32[3]  angular

float32[3]  pos_variance
float32[3]  vel_variance
float32[3]  att_variance
float32[3]  ang_variance

float16[3] pos_offset
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.ros.Odometry
uavcan.Timestamp timestamp
saturated float32 deltTime
saturated float32[3] position
saturated float32[4] quaternion
saturated float32[3] velocity
saturated float32[3] angular
saturated float32[3] pos_variance
saturated float32[3] vel_variance
saturated float32[3] att_variance
saturated float32[3] ang_variance
saturated float16[3] pos_offset
******************************************************************************/

#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_ID                   1110
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_NAME                 "uavcan.equipment.ros.Odometry"
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_SIGNATURE            (0xA01A1EFBCC887740ULL)

#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_MAX_SIZE             ((936 + 7)/8)

// Constants

#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_POSITION_LENGTH                                    3
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_QUATERNION_LENGTH                                  4
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_VELOCITY_LENGTH                                    3
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_ANGULAR_LENGTH                                     3
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_POS_VARIANCE_LENGTH                                3
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_VEL_VARIANCE_LENGTH                                3
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_ATT_VARIANCE_LENGTH                                3
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_ANG_VARIANCE_LENGTH                                3
#define UAVCAN_EQUIPMENT_ROS_ODOMETRY_POS_OFFSET_LENGTH                                  3

typedef struct
{
    // FieldTypes
    uavcan_Timestamp timestamp;                     //
    float      deltTime;                      // float32 Saturate
    float      position[3];                   // Static Array 32bit[3] max items
    float      quaternion[4];                 // Static Array 32bit[4] max items
    float      velocity[3];                   // Static Array 32bit[3] max items
    float      angular[3];                    // Static Array 32bit[3] max items
    float      pos_variance[3];               // Static Array 32bit[3] max items
    float      vel_variance[3];               // Static Array 32bit[3] max items
    float      att_variance[3];               // Static Array 32bit[3] max items
    float      ang_variance[3];               // Static Array 32bit[3] max items
    float      pos_offset[3];                 // Static Array 16bit[3] max items

} uavcan_equipment_ros_Odometry;

static inline
uint32_t uavcan_equipment_ros_Odometry_encode(uavcan_equipment_ros_Odometry* source, void* msg_buf);

static inline
int32_t uavcan_equipment_ros_Odometry_decode(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_ros_Odometry* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_ros_Odometry_encode_internal(uavcan_equipment_ros_Odometry* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_ros_Odometry_decode_internal(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_ros_Odometry* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\ros\1110.Odometry.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_ros_Odometry_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_ros_Odometry_encode_internal(uavcan_equipment_ros_Odometry* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Compound
    offset = uavcan_Timestamp_encode_internal(&source->timestamp, msg_buf, offset, 0);
    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->deltTime); // 2147483647
    offset += 32;

    // Static array (position)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->position + c)); // 2147483647
        offset += 32;
    }

    // Static array (quaternion)
    for (c = 0; c < 4; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->quaternion + c)); // 2147483647
        offset += 32;
    }

    // Static array (velocity)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->velocity + c)); // 2147483647
        offset += 32;
    }

    // Static array (angular)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->angular + c)); // 2147483647
        offset += 32;
    }

    // Static array (pos_variance)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->pos_variance + c)); // 2147483647
        offset += 32;
    }

    // Static array (vel_variance)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->vel_variance + c)); // 2147483647
        offset += 32;
    }

    // Static array (att_variance)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->att_variance + c)); // 2147483647
        offset += 32;
    }

    // Static array (ang_variance)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->ang_variance + c)); // 2147483647
        offset += 32;
    }

    // Static array (pos_offset)
    for (c = 0; c < 3; c++)
    {
#ifndef CANARD_USE_FLOAT16_CAST
        uint16_t tmpe_float = canardConvertNativeFloatToFloat16(source->pos_offset[c]);
#else
        CANARD_USE_FLOAT16_CAST tmpe_float = (CANARD_USE_FLOAT16_CAST)source->pos_offset[c];
#endif
        canardEncodeScalar(msg_buf, offset, 16, (void*)&tmpe_float); // 32767
        offset += 16;
    }

    return offset;
}

/**
  * @brief uavcan_equipment_ros_Odometry_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_ros_Odometry_encode(uavcan_equipment_ros_Odometry* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_ros_Odometry_encode_internal(source, msg_buf, offset, 0);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_ros_Odometry_decode_internal
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_ros_Odometry dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_ros_Odometry_decode_internal(
  const CanardTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_ros_Odometry* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Compound
    offset = uavcan_Timestamp_decode_internal(transfer, 0, &dest->timestamp, dyn_arr_buf, offset);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_equipment_ros_Odometry_error_exit;
    }

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->deltTime);
    if (ret != 32)
    {
        goto uavcan_equipment_ros_Odometry_error_exit;
    }
    offset += 32;

    // Static array (position)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->position + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (quaternion)
    for (c = 0; c < 4; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->quaternion + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (velocity)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->velocity + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (angular)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->angular + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (pos_variance)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->pos_variance + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (vel_variance)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->vel_variance + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (att_variance)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->att_variance + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (ang_variance)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->ang_variance + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
        offset += 32;
    }

    // Static array (pos_offset)
    for (c = 0; c < 3; c++)
    {
#ifndef CANARD_USE_FLOAT16_CAST
        uint16_t tmpe_float = 0;
#else
        CANARD_USE_FLOAT16_CAST tmpe_float = 0;
#endif
        ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmpe_float);
        if (ret != 16)
        {
            goto uavcan_equipment_ros_Odometry_error_exit;
        }
#ifndef CANARD_USE_FLOAT16_CAST
        dest->pos_offset[c] = canardConvertFloat16ToNativeFloat(tmpe_float);
#else
        dest->pos_offset[c] = (float)tmpe_float;
#endif
        offset += 16;
    }
    return offset;

uavcan_equipment_ros_Odometry_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_ros_Odometry_decode
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_ros_Odometry dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_ros_Odometry_decode(const CanardTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_ros_Odometry* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_ros_Odometry); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_ros_Odometry_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_ROS_ODOMETRY