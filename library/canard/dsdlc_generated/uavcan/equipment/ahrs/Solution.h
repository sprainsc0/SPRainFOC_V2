/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\ahrs\1000.Solution.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_AHRS_SOLUTION
#define __UAVCAN_EQUIPMENT_AHRS_SOLUTION

#include <stdint.h>
#include "canard_scalar.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\Timestamp.h>

/******************************* Source text **********************************
# 1000
# Inertial data and orientation in body frame.
#

uavcan.Timestamp timestamp

#
# Normalized quaternion
#
float32[4] orientation_xyzw
float16[<=9] orientation_covariance

#
# rad/sec
#
float32[3] velocity
float16[<=9] velocity_covariance

#
# m/s^2
#
float32[3] position
float16[<=9] position_covariance
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.ahrs.Solution
uavcan.Timestamp timestamp
saturated float32[4] orientation_xyzw
saturated float16[<=9] orientation_covariance
saturated float32[3] velocity
saturated float16[<=9] velocity_covariance
saturated float32[3] position
saturated float16[<=9] position_covariance
******************************************************************************/

#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_ID                  1000
#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_NAME                "uavcan.equipment.ahrs.Solution"
#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_SIGNATURE           (0xCDA75613D9B9C152ULL)

#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_MAX_SIZE            ((820 + 7)/8)

// Constants

#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_ORIENTATION_XYZW_LENGTH                           4
#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_ORIENTATION_COVARIANCE_MAX_LENGTH                 9
#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_VELOCITY_LENGTH                                   3
#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_VELOCITY_COVARIANCE_MAX_LENGTH                    9
#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_POSITION_LENGTH                                   3
#define UAVCAN_EQUIPMENT_AHRS_SOLUTION_POSITION_COVARIANCE_MAX_LENGTH                    9

typedef struct
{
    // FieldTypes
    uavcan_Timestamp timestamp;                     //
    float      orientation_xyzw[4];           // Static Array 32bit[4] max items
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[9] max items
    } orientation_covariance;
    float      velocity[3];                   // Static Array 32bit[3] max items
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[9] max items
    } velocity_covariance;
    float      position[3];                   // Static Array 32bit[3] max items
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[9] max items
    } position_covariance;

} uavcan_equipment_ahrs_Solution;

static inline
uint32_t uavcan_equipment_ahrs_Solution_encode(uavcan_equipment_ahrs_Solution* source, void* msg_buf);

static inline
int32_t uavcan_equipment_ahrs_Solution_decode(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_ahrs_Solution* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_ahrs_Solution_encode_internal(uavcan_equipment_ahrs_Solution* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_ahrs_Solution_decode_internal(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_ahrs_Solution* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\ahrs\1000.Solution.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_ahrs_Solution_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_ahrs_Solution_encode_internal(uavcan_equipment_ahrs_Solution* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Compound
    offset = uavcan_Timestamp_encode_internal(&source->timestamp, msg_buf, offset, 0);
    // Static array (orientation_xyzw)
    for (c = 0; c < 4; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->orientation_xyzw + c)); // 2147483647
        offset += 32;
    }

    // Dynamic Array (orientation_covariance)
    // - Add array length
    canardEncodeScalar(msg_buf, offset, 4, (void*)&source->orientation_covariance.len);
    offset += 4;

    // - Add array items
    for (c = 0; c < source->orientation_covariance.len; c++)
    {
#ifndef CANARD_USE_FLOAT16_CAST
        uint16_t tmpe_float = canardConvertNativeFloatToFloat16(source->orientation_covariance.data[c]);
#else
        CANARD_USE_FLOAT16_CAST tmpe_float = (CANARD_USE_FLOAT16_CAST)source->orientation_covariance.data[c];
#endif
        canardEncodeScalar(msg_buf, offset, 16, (void*)&tmpe_float); // 32767
        offset += 16;
    }

    // Static array (velocity)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->velocity + c)); // 2147483647
        offset += 32;
    }

    // Dynamic Array (velocity_covariance)
    // - Add array length
    canardEncodeScalar(msg_buf, offset, 4, (void*)&source->velocity_covariance.len);
    offset += 4;

    // - Add array items
    for (c = 0; c < source->velocity_covariance.len; c++)
    {
#ifndef CANARD_USE_FLOAT16_CAST
        uint16_t tmpe_float = canardConvertNativeFloatToFloat16(source->velocity_covariance.data[c]);
#else
        CANARD_USE_FLOAT16_CAST tmpe_float = (CANARD_USE_FLOAT16_CAST)source->velocity_covariance.data[c];
#endif
        canardEncodeScalar(msg_buf, offset, 16, (void*)&tmpe_float); // 32767
        offset += 16;
    }

    // Static array (position)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->position + c)); // 2147483647
        offset += 32;
    }

    // Dynamic Array (position_covariance)
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 4, (void*)&source->position_covariance.len);
        offset += 4;
    }

    // - Add array items
    for (c = 0; c < source->position_covariance.len; c++)
    {
#ifndef CANARD_USE_FLOAT16_CAST
        uint16_t tmpe_float = canardConvertNativeFloatToFloat16(source->position_covariance.data[c]);
#else
        CANARD_USE_FLOAT16_CAST tmpe_float = (CANARD_USE_FLOAT16_CAST)source->position_covariance.data[c];
#endif
        canardEncodeScalar(msg_buf, offset, 16, (void*)&tmpe_float); // 32767
        offset += 16;
    }

    return offset;
}

/**
  * @brief uavcan_equipment_ahrs_Solution_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_ahrs_Solution_encode(uavcan_equipment_ahrs_Solution* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_ahrs_Solution_encode_internal(source, msg_buf, offset, 0);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_ahrs_Solution_decode_internal
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_ahrs_Solution dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_ahrs_Solution_decode_internal(
  const CanardTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_ahrs_Solution* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Compound
    offset = uavcan_Timestamp_decode_internal(transfer, 0, &dest->timestamp, dyn_arr_buf, offset);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_equipment_ahrs_Solution_error_exit;
    }

    // Static array (orientation_xyzw)
    for (c = 0; c < 4; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->orientation_xyzw + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ahrs_Solution_error_exit;
        }
        offset += 32;
    }

    // Dynamic Array (orientation_covariance)
    //  - Array length, not last item 4 bits
    ret = canardDecodeScalar(transfer,
                             offset,
                             4,
                             false,
                             (void*)&dest->orientation_covariance.len); // 32767
    if (ret != 4)
    {
        goto uavcan_equipment_ahrs_Solution_error_exit;
    }
    offset += 4;

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->orientation_covariance.data = (float*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->orientation_covariance.len; c++)
    {
        if (dyn_arr_buf)
        {
#ifndef CANARD_USE_FLOAT16_CAST
            uint16_t tmpe_float = 0;
#else
            CANARD_USE_FLOAT16_CAST tmpe_float = 0;
#endif
            ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmpe_float);
            if (ret != 16)
            {
                goto uavcan_equipment_ahrs_Solution_error_exit;
            }

#ifndef CANARD_USE_FLOAT16_CAST
            dest->orientation_covariance.data[c] = canardConvertFloat16ToNativeFloat(tmpe_float);
#else
            dest->orientation_covariance.data[c] = (float)tmpe_float;
#endif
        }
        offset += 16;
    }

    // Static array (velocity)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->velocity + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ahrs_Solution_error_exit;
        }
        offset += 32;
    }

    // Dynamic Array (velocity_covariance)
    //  - Array length, not last item 4 bits
    ret = canardDecodeScalar(transfer,
                             offset,
                             4,
                             false,
                             (void*)&dest->velocity_covariance.len); // 32767
    if (ret != 4)
    {
        goto uavcan_equipment_ahrs_Solution_error_exit;
    }
    offset += 4;

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->velocity_covariance.data = (float*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->velocity_covariance.len; c++)
    {
        if (dyn_arr_buf)
        {
#ifndef CANARD_USE_FLOAT16_CAST
            uint16_t tmpe_float = 0;
#else
            CANARD_USE_FLOAT16_CAST tmpe_float = 0;
#endif
            ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmpe_float);
            if (ret != 16)
            {
                goto uavcan_equipment_ahrs_Solution_error_exit;
            }

#ifndef CANARD_USE_FLOAT16_CAST
            dest->velocity_covariance.data[c] = canardConvertFloat16ToNativeFloat(tmpe_float);
#else
            dest->velocity_covariance.data[c] = (float)tmpe_float;
#endif
        }
        offset += 16;
    }

    // Static array (position)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->position + c));
        if (ret != 32)
        {
            goto uavcan_equipment_ahrs_Solution_error_exit;
        }
        offset += 32;
    }

    // Dynamic Array (position_covariance)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len)
    {
        //  - Calculate Array length from MSG length
        dest->position_covariance.len = ((payload_len * 8) - offset ) / 16; // 16 bit array item size
    }
    else
    {
        // - Array length 4 bits
        ret = canardDecodeScalar(transfer,
                                 offset,
                                 4,
                                 false,
                                 (void*)&dest->position_covariance.len); // 32767
        if (ret != 4)
        {
            goto uavcan_equipment_ahrs_Solution_error_exit;
        }
        offset += 4;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->position_covariance.data = (float*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->position_covariance.len; c++)
    {
        if (dyn_arr_buf)
        {
#ifndef CANARD_USE_FLOAT16_CAST
            uint16_t tmpe_float = 0;
#else
            CANARD_USE_FLOAT16_CAST tmpe_float = 0;
#endif
            ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmpe_float);
            if (ret != 16)
            {
                goto uavcan_equipment_ahrs_Solution_error_exit;
            }

#ifndef CANARD_USE_FLOAT16_CAST
            dest->position_covariance.data[c] = canardConvertFloat16ToNativeFloat(tmpe_float);
#else
            dest->position_covariance.data[c] = (float)tmpe_float;
#endif
        }
        offset += 16;
    }
    return offset;

uavcan_equipment_ahrs_Solution_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_ahrs_Solution_decode
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_ahrs_Solution dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_ahrs_Solution_decode(const CanardTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_ahrs_Solution* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_ahrs_Solution); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_ahrs_Solution_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_AHRS_SOLUTION