/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\gnss\1063.Fix2.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_GNSS_FIX2
#define __UAVCAN_EQUIPMENT_GNSS_FIX2

#include <stdint.h>
#include "canard_scalar.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\Timestamp.h>

/******************************* Source text **********************************
# 1063
# GNSS ECEF and LLA navigation solution with uncertainty.
#

#
# Global network-synchronized time, if available, otherwise zero.
#
uavcan.Timestamp timestamp

#
# Time solution.
# The method and number of leap seconds which were in use for deriving the timestamp are
# defined in the fields below.
#
uavcan.Timestamp gnss_timestamp

#
# Method used for deriving the GNSS timestamp field.
# This data type relies on the following definitions:
#
#   Leap seconds  - Accumulated one-second adjustments applied to UTC since 1972.
#                   For reference, on May 2017, the number of leap seconds was equal 27.
#                   The number of leap seconds is taken from the field num_leap_seconds.
#                   Refer to https://en.wikipedia.org/wiki/Leap_second for a general overview.
#
#   TAI timestamp - The number of microseconds between the current TAI time and
#                   the TAI time at UTC 1970-01-01T00:00:00.
#
#   UTC timestamp - The number of microseconds between the current UTC time and
#                   UTC 1970-01-01T00:00:00.
#                   UTC can be expressed via TAI as follows (in seconds):
#                       UTC = TAI - num_leap_seconds - 10
#                   And via GPS (in seconds):
#                       UTC = GPS - num_leap_seconds + 9
#
#   GPS timestamp - The number of microseconds between the current GPS time and
#                   the GPS time at UTC 1970-01-01T00:00:00.
#                   GPS time can be expressed via TAI as follows (in seconds):
#                       GPS = TAI - 19
#
uint3 GNSS_TIME_STANDARD_NONE = 0  # Time is unknown
uint3 GNSS_TIME_STANDARD_TAI  = 1
uint3 GNSS_TIME_STANDARD_UTC  = 2
uint3 GNSS_TIME_STANDARD_GPS  = 3
uint3 gnss_time_standard

void13   # Reserved space

uint4    gnss_id

uint8    lag_ms

#
# Position and velocity solution
#
int37 longitude_deg_1e8            # Longitude degrees multiplied by 1e8 (approx. 1 mm per LSB)
int37 latitude_deg_1e8             # Latitude degrees multiplied by 1e8 (approx. 1 mm per LSB on equator)
int27 height_msl_mm                # Height above mean sea level in millimeters

float32[3] ned_velocity            # NED frame (north-east-down) in meters per second

#
# Fix status
#
uint6 sats_used

uint3 status

#
# Precision
#
float32 pos_covariance    # Position and velocity covariance. Units are
                            # m^2 for position, (m/s)^2 for velocity and
                            # m^2/s for position/velocity.
float32 hgt_covariance

float32 vel_covariance

float16 hdop

float16 vdop

float16[3] pos_offset
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.gnss.Fix2
uavcan.Timestamp timestamp
uavcan.Timestamp gnss_timestamp
saturated uint3 gnss_time_standard
void13
saturated uint4 gnss_id
saturated uint8 lag_ms
saturated int37 longitude_deg_1e8
saturated int37 latitude_deg_1e8
saturated int27 height_msl_mm
saturated float32[3] ned_velocity
saturated uint6 sats_used
saturated uint3 status
saturated float32 pos_covariance
saturated float32 hgt_covariance
saturated float32 vel_covariance
saturated float16 hdop
saturated float16 vdop
saturated float16[3] pos_offset
******************************************************************************/

#define UAVCAN_EQUIPMENT_GNSS_FIX2_ID                      1063
#define UAVCAN_EQUIPMENT_GNSS_FIX2_NAME                    "uavcan.equipment.gnss.Fix2"
#define UAVCAN_EQUIPMENT_GNSS_FIX2_SIGNATURE               (0x91E51D33690235AULL)

#define UAVCAN_EQUIPMENT_GNSS_FIX2_MAX_SIZE                ((522 + 7)/8)

// Constants
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_NONE                    0 // 0
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_TAI                     1 // 1
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_UTC                     2 // 2
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_GPS                     3 // 3

#define UAVCAN_EQUIPMENT_GNSS_FIX2_NED_VELOCITY_LENGTH                                   3
#define UAVCAN_EQUIPMENT_GNSS_FIX2_POS_OFFSET_LENGTH                                     3

typedef struct
{
    // FieldTypes
    uavcan_Timestamp timestamp;                     //
    uavcan_Timestamp gnss_timestamp;                //
    uint8_t    gnss_time_standard;            // bit len 3
    // void13
    uint8_t    gnss_id;                       // bit len 4
    uint8_t    lag_ms;                        // bit len 8
    int64_t    longitude_deg_1e8;             // bit len 37
    int64_t    latitude_deg_1e8;              // bit len 37
    int32_t    height_msl_mm;                 // bit len 27
    float      ned_velocity[3];               // Static Array 32bit[3] max items
    uint8_t    sats_used;                     // bit len 6
    uint8_t    status;                        // bit len 3
    float      pos_covariance;                // float32 Saturate
    float      hgt_covariance;                // float32 Saturate
    float      vel_covariance;                // float32 Saturate
    float      hdop;                          // float16 Saturate
    float      vdop;                          // float16 Saturate
    float      pos_offset[3];                 // Static Array 16bit[3] max items

} uavcan_equipment_gnss_Fix2;

static inline
uint32_t uavcan_equipment_gnss_Fix2_encode(uavcan_equipment_gnss_Fix2* source, void* msg_buf);

static inline
int32_t uavcan_equipment_gnss_Fix2_decode(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_Fix2* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_gnss_Fix2_encode_internal(uavcan_equipment_gnss_Fix2* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_gnss_Fix2_decode_internal(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_Fix2* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\gnss\1063.Fix2.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_gnss_Fix2_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_gnss_Fix2_encode_internal(uavcan_equipment_gnss_Fix2* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    // Compound
    offset = uavcan_Timestamp_encode_internal(&source->timestamp, msg_buf, offset, 0);

    // Compound
    offset = uavcan_Timestamp_encode_internal(&source->gnss_timestamp, msg_buf, offset, 0);
    source->gnss_time_standard = CANARD_INTERNAL_SATURATE_UNSIGNED(source->gnss_time_standard, 7)
    canardEncodeScalar(msg_buf, offset, 3, (void*)&source->gnss_time_standard); // 7
    offset += 3;

    // Void13
    offset += 13;
    source->gnss_id = CANARD_INTERNAL_SATURATE_UNSIGNED(source->gnss_id, 15)
    canardEncodeScalar(msg_buf, offset, 4, (void*)&source->gnss_id); // 15
    offset += 4;

    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->lag_ms); // 255
    offset += 8;

    source->longitude_deg_1e8 = CANARD_INTERNAL_SATURATE(source->longitude_deg_1e8, 68719476735)
    canardEncodeScalar(msg_buf, offset, 37, (void*)&source->longitude_deg_1e8); // 68719476735
    offset += 37;

    source->latitude_deg_1e8 = CANARD_INTERNAL_SATURATE(source->latitude_deg_1e8, 68719476735)
    canardEncodeScalar(msg_buf, offset, 37, (void*)&source->latitude_deg_1e8); // 68719476735
    offset += 37;

    source->height_msl_mm = CANARD_INTERNAL_SATURATE(source->height_msl_mm, 67108863)
    canardEncodeScalar(msg_buf, offset, 27, (void*)&source->height_msl_mm); // 67108863
    offset += 27;

    // Static array (ned_velocity)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->ned_velocity + c)); // 2147483647
        offset += 32;
    }

    source->sats_used = CANARD_INTERNAL_SATURATE_UNSIGNED(source->sats_used, 63)
    canardEncodeScalar(msg_buf, offset, 6, (void*)&source->sats_used); // 63
    offset += 6;

    source->status = CANARD_INTERNAL_SATURATE_UNSIGNED(source->status, 7)
    canardEncodeScalar(msg_buf, offset, 3, (void*)&source->status); // 7
    offset += 3;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->pos_covariance); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->hgt_covariance); // 2147483647
    offset += 32;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->vel_covariance); // 2147483647
    offset += 32;

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->hdop);
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->hdop;
#endif
    canardEncodeScalar(msg_buf, offset, 16, (void*)&tmp_float); // 32767
    offset += 16;

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->vdop);
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->vdop;
#endif
    canardEncodeScalar(msg_buf, offset, 16, (void*)&tmp_float); // 32767
    offset += 16;
    // Static array (pos_offset)
    for (c = 0; c < 3; c++)
    {
#ifndef CANARD_USE_FLOAT16_CAST
        uint16_t tmpe_float = canardConvertNativeFloatToFloat16(source->pos_offset[c]);
#else
        CANARD_USE_FLOAT16_CAST tmpe_float = (CANARD_USE_FLOAT16_CAST)source->pos_offset[c];
#endif
        canardEncodeScalar(msg_buf, offset, 16, (void*)&tmpe_float); // 32767
        offset += 16;
    }

    return offset;
}

/**
  * @brief uavcan_equipment_gnss_Fix2_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_gnss_Fix2_encode(uavcan_equipment_gnss_Fix2* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_gnss_Fix2_encode_internal(source, msg_buf, offset, 0);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_gnss_Fix2_decode_internal
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_Fix2 dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_Fix2_decode_internal(
  const CanardTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_gnss_Fix2* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    // Compound
    offset = uavcan_Timestamp_decode_internal(transfer, 0, &dest->timestamp, dyn_arr_buf, offset);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }

    // Compound
    offset = uavcan_Timestamp_decode_internal(transfer, 0, &dest->gnss_timestamp, dyn_arr_buf, offset);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }

    ret = canardDecodeScalar(transfer, offset, 3, false, (void*)&dest->gnss_time_standard);
    if (ret != 3)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 3;

    // Void13
    offset += 13;

    ret = canardDecodeScalar(transfer, offset, 4, false, (void*)&dest->gnss_id);
    if (ret != 4)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 4;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->lag_ms);
    if (ret != 8)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, offset, 37, true, (void*)&dest->longitude_deg_1e8);
    if (ret != 37)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 37;

    ret = canardDecodeScalar(transfer, offset, 37, true, (void*)&dest->latitude_deg_1e8);
    if (ret != 37)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 37;

    ret = canardDecodeScalar(transfer, offset, 27, true, (void*)&dest->height_msl_mm);
    if (ret != 27)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 27;

    // Static array (ned_velocity)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 32, false, (void*)(dest->ned_velocity + c));
        if (ret != 32)
        {
            goto uavcan_equipment_gnss_Fix2_error_exit;
        }
        offset += 32;
    }

    ret = canardDecodeScalar(transfer, offset, 6, false, (void*)&dest->sats_used);
    if (ret != 6)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 6;

    ret = canardDecodeScalar(transfer, offset, 3, false, (void*)&dest->status);
    if (ret != 3)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 3;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->pos_covariance);
    if (ret != 32)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->hgt_covariance);
    if (ret != 32)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 32;

    ret = canardDecodeScalar(transfer, offset, 32, false, (void*)&dest->vel_covariance);
    if (ret != 32)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 32;

    // float16 special handling
    ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmp_float);

    if (ret != 16)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->hdop = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->hdop = (float)tmp_float;
#endif
    offset += 16;

    // float16 special handling
    ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmp_float);

    if (ret != 16)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->vdop = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->vdop = (float)tmp_float;
#endif
    offset += 16;

    // Static array (pos_offset)
    for (c = 0; c < 3; c++)
    {
#ifndef CANARD_USE_FLOAT16_CAST
        uint16_t tmpe_float = 0;
#else
        CANARD_USE_FLOAT16_CAST tmpe_float = 0;
#endif
        ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmpe_float);
        if (ret != 16)
        {
            goto uavcan_equipment_gnss_Fix2_error_exit;
        }
#ifndef CANARD_USE_FLOAT16_CAST
        dest->pos_offset[c] = canardConvertFloat16ToNativeFloat(tmpe_float);
#else
        dest->pos_offset[c] = (float)tmpe_float;
#endif
        offset += 16;
    }
    return offset;

uavcan_equipment_gnss_Fix2_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_gnss_Fix2_decode
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_Fix2 dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_Fix2_decode(const CanardTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_gnss_Fix2* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_gnss_Fix2); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_gnss_Fix2_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_GNSS_FIX2