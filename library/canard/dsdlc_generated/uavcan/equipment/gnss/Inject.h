/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\gnss\1064.Inject.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_GNSS_INJECT
#define __UAVCAN_EQUIPMENT_GNSS_INJECT

#include <stdint.h>
#include "canard_scalar.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\Timestamp.h>

/******************************* Source text **********************************
# 1064
# GNSS Inject data.
#

#
# Global network-synchronized time, if available, otherwise zero.
#
uavcan.Timestamp timestamp

#
# length of data
#
uint8 len

#
# LSB: 1=fragmented
#
uint8 flags

#
#data to write to GPS device (RTCM message)
#
uint8[<=182] data
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.gnss.Inject
uavcan.Timestamp timestamp
saturated uint8 len
saturated uint8 flags
saturated uint8[<=182] data
******************************************************************************/

#define UAVCAN_EQUIPMENT_GNSS_INJECT_ID                    1064
#define UAVCAN_EQUIPMENT_GNSS_INJECT_NAME                  "uavcan.equipment.gnss.Inject"
#define UAVCAN_EQUIPMENT_GNSS_INJECT_SIGNATURE             (0x65C9348442794126ULL)

#define UAVCAN_EQUIPMENT_GNSS_INJECT_MAX_SIZE              ((1536 + 7)/8)

// Constants

#define UAVCAN_EQUIPMENT_GNSS_INJECT_DATA_MAX_LENGTH                                     182

typedef struct
{
    // FieldTypes
    uavcan_Timestamp timestamp;                     //
    uint8_t    len;                           // bit len 8
    uint8_t    flags;                         // bit len 8
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[182] max items
    } data;

} uavcan_equipment_gnss_Inject;

static inline
uint32_t uavcan_equipment_gnss_Inject_encode(uavcan_equipment_gnss_Inject* source, void* msg_buf);

static inline
int32_t uavcan_equipment_gnss_Inject_decode(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_Inject* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_gnss_Inject_encode_internal(uavcan_equipment_gnss_Inject* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_gnss_Inject_decode_internal(const CanardTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_Inject* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: i:\BlackBox\aircraft_h7\module\canard\dsdl\uavcan\equipment\gnss\1064.Inject.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_gnss_Inject_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_gnss_Inject_encode_internal(uavcan_equipment_gnss_Inject* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Compound
    offset = uavcan_Timestamp_encode_internal(&source->timestamp, msg_buf, offset, 0);
    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->len); // 255
    offset += 8;

    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->flags); // 255
    offset += 8;

    // Dynamic Array (data)
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 8, (void*)&source->data.len);
        offset += 8;
    }

    // - Add array items
    for (c = 0; c < source->data.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           8,
                           (void*)(source->data.data + c));// 255
        offset += 8;
    }

    return offset;
}

/**
  * @brief uavcan_equipment_gnss_Inject_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_gnss_Inject_encode(uavcan_equipment_gnss_Inject* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_gnss_Inject_encode_internal(source, msg_buf, offset, 0);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_gnss_Inject_decode_internal
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_Inject dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_Inject_decode_internal(
  const CanardTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_gnss_Inject* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Compound
    offset = uavcan_Timestamp_decode_internal(transfer, 0, &dest->timestamp, dyn_arr_buf, offset);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_equipment_gnss_Inject_error_exit;
    }

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->len);
    if (ret != 8)
    {
        goto uavcan_equipment_gnss_Inject_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->flags);
    if (ret != 8)
    {
        goto uavcan_equipment_gnss_Inject_error_exit;
    }
    offset += 8;

    // Dynamic Array (data)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len)
    {
        //  - Calculate Array length from MSG length
        dest->data.len = ((payload_len * 8) - offset ) / 8; // 8 bit array item size
    }
    else
    {
        // - Array length 8 bits
        ret = canardDecodeScalar(transfer,
                                 offset,
                                 8,
                                 false,
                                 (void*)&dest->data.len); // 255
        if (ret != 8)
        {
            goto uavcan_equipment_gnss_Inject_error_exit;
        }
        offset += 8;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->data.data = (uint8_t*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->data.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     offset,
                                     8,
                                     false,
                                     (void*)*dyn_arr_buf); // 255
            if (ret != 8)
            {
                goto uavcan_equipment_gnss_Inject_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((uint8_t*)*dyn_arr_buf) + 1);

        }
        offset += 8;
    }
    return offset;

uavcan_equipment_gnss_Inject_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_gnss_Inject_decode
  * @param transfer: Pointer to CanardTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_Inject dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_Inject_decode(const CanardTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_gnss_Inject* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_gnss_Inject); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_gnss_Inject_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_GNSS_INJECT